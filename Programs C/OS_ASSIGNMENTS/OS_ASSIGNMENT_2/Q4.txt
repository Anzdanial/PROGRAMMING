#include <stdio.h>
#include <pthread.h>
#include <stdlib.h>

#define SIZE 100

int numbers[SIZE];
int size;

void *average(void *arg) {
    int sum = 0;
    for (int i = 0; i < size; i++) {
        sum += numbers[i];
    }
    double avg = (double)sum / size;
    double *result = malloc(sizeof(double));
    *result = avg;
    pthread_exit(result);
}

void *maximum(void *arg) {
    int max = numbers[0];
    for (int i = 1; i < size; i++) {
        if (numbers[i] > max) {
            max = numbers[i];
        }
    }
    int *result = malloc(sizeof(int));
    *result = max;
    pthread_exit(result);
}

void *minimum(void *arg) {
    int min = numbers[0];
    for (int i = 1; i < size; i++) {
        if (numbers[i] < min) {
            min = numbers[i];
        }
    }
    int *result = malloc(sizeof(int));
    *result = min;
    pthread_exit(result);
}

int main(int argc, char *argv[]) {
    if (argc < 2) {
        printf("Usage: %s <list of numbers>\n", argv[0]);
        return 1;
    }

    size = argc - 1;
    for (int i = 0; i < size; i++) {
        numbers[i] = atoi(argv[i + 1]);
    }

    pthread_t threads[3];
    void *thread_result;

    pthread_create(&threads[0], NULL, average, NULL);
    pthread_create(&threads[1], NULL, maximum, NULL);
    pthread_create(&threads[2], NULL, minimum, NULL);

    for (int i = 0; i < 3; i++) {
        pthread_join(threads[i], &thread_result);
        if (i == 0) {
            double avg = *((double *)thread_result);
            printf("Average: %.2f\n", avg);
        } else if (i == 1) {
            int max = *((int *)thread_result);
            printf("Maximum: %d\n", max);
        } else if (i == 2) {
            int min = *((int *)thread_result);
            printf("Minimum: %d\n", min);
        }
        free(thread_result);
    }

    return 0;
}
